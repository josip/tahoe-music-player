var test_NavigationController = new function () {
  var Navigation = da.controller.Navigation,
      self = this;
  
  this.setup = function () {
    self.maps_updated = false;
    // We're doing this for sorting test
    da.db.DocumentTemplate.Song.findFirst({
      properties: {title: "Maps"},
      onSuccess: function (maps) {
        maps.update({track: 6}, function () {
          self.maps_updated = true;
        })
      }
    });
  };
      
  // We can't use da.controller.CollectionScanner.isFinished()
  // here because scanner worker has one minute timeout 
  this.test_waitForCollectionScanner = {
    method: "waits.forJS",
    params: {
      js: function () {
        return da.db.DEFAULT.views.Song.view.rows.length === 3 && self.maps_updated;
      }
    }
  };
  
  // Generated by Windmill
  // It clicks on a item in Artists column and than on a item in Albums column
  this.test_navigationBehaviour = [
    {"params": {"xpath": "//div[@id='Artists_column_container']/div/div[2]/a[2]/span"},
      "method": "click"},
    {"params": {"xpath": "//div[@id='Albums_column']/div[2]/a[@title='Urgency']"},
     "method": "click"}
  ];
  
  this.test_activeColumns = function () {
    var ac = Navigation.activeColumns;
    jum.assertEquals("first column should be Root",
      "Root", ac[0].column_name
    );
    jum.assertEquals("second column should be Artists", 
      "Artists", ac[1].column_name
    );
    jum.assertEquals("third colum should be Albums",
      "Albums", ac[2].column_name
    );
    jum.assertEquals("fourth column should be Songs", 
      "Songs", ac[3].column_name
    );
  };
  
  // Indirectly tests column re-rendering as all these
  // items were dynamically added when CollectionScanner
  // discovered them, as well as filtering.
  this.test_items = function () {
    var ac      = Navigation.activeColumns,
        artists = ac[1].column,
        albums  = ac[2].column,
        songs   = ac[3].column;
    
    jum.assertEquals("there should be two artists",
      2, artists.options.totalCount
    );
    jum.assertEquals("first artist should be Keane",
      "Keane", artists.getItem(0).value.title
    );
    jum.assertEquals("second artist should be Superhumanoids",
      "Superhumanoids", artists.getItem(1).value.title
    );
    
    jum.assertEquals("there should be only one album by Superhumanoids",
      1, albums.options.totalCount
    );
    jum.assertEquals("first album should be Urgency",
      "Urgency", albums.getItem(0).value.title
    );
    
    jum.assertEquals("there should be two songs on Urgency album",
      2, songs.options.totalCount
    );
    // indirectly tests sorting, since 'Hey Big Bang' is third track
    // while 'Persona' is first on the album
    jum.assertEquals("first song should be 'Persona'",
      "Persona", songs.getItem(0).value.title
    );
    jum.assertEquals("second song should be 'Hey Big Bang'",
      "Hey Big Bang", songs.getItem(1).value.title
    );
  };
  
  this.test_replaceFilter = function () {
    var Root = Navigation.activeColumns[0];
    Root.menu.click(null, Root.menu.getItem("Songs"));
    
    var container = Navigation.activeColumns[1],
        column = container.column;
    
    jum.assertEquals("there should be only two active columns",
      2, Navigation.activeColumns.length
    );
    jum.assertEquals("header should have new title",
      "Songs", container.header.get('text')
    );
    
    jum.assertEquals("there should be three songs",
      3, column.options.totalCount
    );

    // again, indirect sorting test as 'Maps' is 6th track on the album
    // but first alphabetically
    jum.assertEquals("last song should be 'Maps'",
      "Maps", column.getItem(2).value.title
    );
    jum.assertEquals("first song should be 'Persona'",
      "Persona", column.getItem(0).value.title
    );
  };
  
  return this;
};
